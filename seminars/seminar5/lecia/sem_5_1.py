# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
# üìå –°–æ–∑–¥–∞—Ç—å API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å, –æ–±–Ω–æ–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Task —Å –ø–æ–ª—è–º–∏ id, title, description –∏ status.
# üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ tasks –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (–º–µ—Ç–æ–¥ GET).
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ POST).
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ PUT).
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ DELETE).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.

from fastapi import FastAPI
from typing import Optional
from pydantic import BaseModel
import uvicorn
from fastapi import HTTPException

app = FastAPI()


class TaskIn(BaseModel):
    title: str
    description: Optional[str]
    status: bool

class Task(TaskIn):
    id: int


tasks = []


# response_model - —Ç–æ, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç endpoint
@app.get("/", response_model=list[Task])
async def read_tasks():
    return tasks

# response_model - —Ç–æ, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç endpoint
@app.post("/task/", response_model=Task)
# –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö - —Ç–æ, —á—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º
async def create_task(item: TaskIn):
    id = len(tasks) + 1
    task = Task
    task.id = id
    task.status = item.status
    task.title = item.title
    task.description = item.description
    tasks.append(task)
    return task


@app.get("/task/{id}", response_model=Task)
async def get_task_by_id_root(id: int):
    for task in tasks:
        if task.id == id:
            return task


@app.put("/task/{id}", response_model=Task)
async def put_task_by_id_root(id: int, new_task: TaskIn):
    for task in tasks:
        if task.id == id:
            task.status = new_task.status
            task.title = new_task.title
            task.description = new_task.description
            return task
    raise HTTPException(status_code=404, detail="Task not found")




@app.delete("/task/{id}")
async def delete_task(id: int):
    for task in tasks:
        if task.id == id:
            tasks.remove(task)
            return tasks
    raise HTTPException(status_code=404, detail="Task not found")




if __name__ == '__main__':
    uvicorn.run(
        "sem_5_1:app",
        host="127.0.0.1",
        port=8000,
        reload=True
    )
